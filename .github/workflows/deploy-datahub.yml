name: Deploy DataHub

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::179143349265:role/github-actions-ssm-deployer
          aws-region:    ${{ env.AWS_REGION }}

      - name: Send SSM deploy command
        id: send_ssm
        run: |
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub â†’ SSM deploy" \
            --targets "Key=tag:Name,Values=production-datahub-server" \
            --parameters 'commands=["# --- Deployment Script ---","# Change to the application directory, exit if it fails","cd /home/ubuntu/datahub || exit 1","# Pull the latest code from the main branch","git pull origin main","# Change to the docker directory, exit if it fails","cd docker || exit 1","# Pull the latest Docker images defined in docker-compose","docker-compose -p datahub pull","# Start the services in detached mode using docker-compose","docker-compose -p datahub up -d","# --- End Deployment Script ---"]' \
            --timeout-seconds 600 \
            --query "Command.CommandId" \
            --output text)
          echo "cmd_id=$CMD_ID" >> $GITHUB_OUTPUT

      - name: Get instance ID by Name tag
        id: find_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=production-datahub-server" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait & fetch SSM output
        run: |
          # 1) Poll until the command leaves Pending/InProgress (ignore initial errors)
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id ${{ steps.send_ssm.outputs.cmd_id }} \
              --instance-id ${{ steps.find_instance.outputs.instance_id }} \
              --query 'Status' --output text 2>/dev/null) || STATUS="Pending"
            echo "Status: $STATUS"
            if [[ "$STATUS" != "Pending" && "$STATUS" != "InProgress" ]]; then
              break
            fi
            sleep 5
          done

          # 2) Print stdout & stderr
          echo "----- STDOUT -----"
          aws ssm get-command-invocation \
            --command-id ${{ steps.send_ssm.outputs.cmd_id }} \
            --instance-id ${{ steps.find_instance.outputs.instance_id }} \
            --query 'StandardOutputContent' --output text

          echo "----- STDERR -----"
          aws ssm get-command-invocation \
            --command-id ${{ steps.send_ssm.outputs.cmd_id }} \
            --instance-id ${{ steps.find_instance.outputs.instance_id }} \
            --query 'StandardErrorContent' --output text
        shell: bash
