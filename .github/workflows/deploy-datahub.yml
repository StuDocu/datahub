name: Deploy DataHub

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1

jobs:
  deploy:
    name: Deploy DataHub via OIDC + SSM
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::179143349265:role/datahub-oidc-github-actions
          role-session-name: "datahub-oidc-github-actions-${{ github.run_id }}"
          aws-region: ${{ env.AWS_REGION }}

      - name: Execute commands via SSM
        id: execute_command
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --document-name AWS-RunShellScript \
            --targets "Key=tag:Name,Values=production-datahub-server" \
            --parameters '{
              "commands": [
                "cd datahub",
                "git pull origin main",
                "cd docker",
                "docker-compose -p datahub pull",
                "docker-compose -p datahub up -d"
              ]
            }' \
            --comment "Deploying DataHub" \
            --timeout-seconds 700 \
            --query "Command.CommandId" \
            --output text)
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

      - name: Wait for SSM command to finish
        run: |
          echo "Waiting 15s for command to execute…"
          sleep 15

      - name: Fetch SSM command output
        run: |
          INSTANCE_ID=$(aws ssm describe-instance-information \
            --region ${{ env.AWS_REGION }} \
            --filters "Key=tag:Name,Values=production-datahub-server" \
            --query "InstanceInformationList[0].InstanceId" \
            --output text)

          echo "Fetching stdout/stderr for command ${{ steps.execute_command.outputs.command_id }} on instance $INSTANCE_ID…"
          aws ssm get-command-invocation \
            --region ${{ env.AWS_REGION }} \
            --command-id "${{ steps.execute_command.outputs.command_id }}" \
            --instance-id "$INSTANCE_ID" \
            --query '{stdout:StandardOutputContent, stderr:StandardErrorContent}' \
            --output text
