name: Deploy DataHub
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region:    ${{ secrets.AWS_REGION }}

      - name: Send SSM deploy command
        id: send_ssm
        run: |
          # 1) Send the command and grab the CommandId
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub → SSM deploy" \
            --targets "Key=tag:Name,Values=production-datahub-server" \
            --parameters commands='[
              "# --- Deployment Script ---",
              "cd /home/ubuntu/datahub || exit 1",
              "git pull origin main",
              "cd docker || exit 1",
              "docker-compose -p datahub pull",
              "docker-compose -p datahub up -d"
            ]' \
            --timeout-seconds 600 \
            --query "Command.CommandId" \
            --output text)

          echo "cmd_id=$CMD_ID" >> $GITHUB_OUTPUT

      - name: Get instance ID by Name tag
        id: find_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=production-datahub-server" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for command to finish & print output
        run: |
          # 2) Poll until it’s in Success/Failed/TimedOut
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id ${{ steps.send_ssm.outputs.cmd_id }} \
              --instance-id ${{ steps.find_instance.outputs.instance_id }} \
              --query "Status" --output text)
            echo "Current Status: $STATUS"
            if [[ "$STATUS" != "InProgress" && "$STATUS" != "Pending" ]]; then
              break
            fi
            sleep 5
          done

          # 3) Fetch and print the logs
          aws ssm get-command-invocation \
            --command-id ${{ steps.send_ssm.outputs.cmd_id }} \
            --instance-id ${{ steps.find_instance.outputs.instance_id }} \
            --plugin-name aws:RunShellScript \
            --output text \
            --query "StandardOutputContent,StandardErrorContent"
